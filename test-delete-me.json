{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Pick_Subreddit.Exclude_keyofSubreddit.updateCheck_lastUpdated__": {
				"properties": {
					"name": {
						"type": "string"
					},
					"favourited": {
						"type": "boolean"
					}
				},
				"required": [
					"name",
					"favourited"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Subreddit.updateCheck_lastUpdated_": {
				"$ref": "#/components/schemas/Pick_Subreddit.Exclude_keyofSubreddit.updateCheck_lastUpdated__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"LeanSubreddit": {
				"$ref": "#/components/schemas/Omit_Subreddit.updateCheck_lastUpdated_"
			},
			"Pick_Tag.favourited-or-tag_": {
				"properties": {
					"favourited": {
						"type": "boolean"
					},
					"tag": {
						"type": "string"
					}
				},
				"required": [
					"favourited",
					"tag"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"LeanTag": {
				"$ref": "#/components/schemas/Pick_Tag.favourited-or-tag_"
			},
			"Log": {
				"properties": {
					"other": {
						"type": "string",
						"nullable": true
					},
					"error": {
						"type": "string",
						"nullable": true
					},
					"service": {
						"type": "string",
						"nullable": true
					},
					"message": {
						"type": "string",
						"nullable": true
					},
					"level": {
						"type": "string"
					},
					"createdAt": {
						"type": "number",
						"format": "double"
					},
					"uniqueId": {
						"type": "string"
					}
				},
				"required": [
					"other",
					"error",
					"service",
					"message",
					"level",
					"createdAt",
					"uniqueId"
				],
				"type": "object",
				"description": "Model Log"
			},
			"IncomingLog": {
				"properties": {
					"other": {},
					"error": {
						"type": "string"
					},
					"service": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"level": {
						"type": "string",
						"enum": [
							"fatal",
							"error",
							"warn",
							"info",
							"debug",
							"trace"
						]
					}
				},
				"required": [
					"level"
				],
				"type": "object"
			},
			"PostType": {
				"properties": {
					"subredditName": {
						"type": "string"
					},
					"downloadedMedia": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"downloadedMediaCount": {
						"type": "number",
						"format": "double"
					},
					"mediaDownloadTries": {
						"type": "number",
						"format": "double"
					},
					"downloadError": {
						"type": "string",
						"nullable": true
					},
					"postMediaImagesProcessingError": {
						"type": "string",
						"nullable": true
					},
					"postThumbnailsCreated": {
						"type": "boolean"
					},
					"postMediaImagesHaveBeenProcessed": {
						"type": "boolean"
					},
					"couldNotDownload": {
						"type": "boolean"
					},
					"mediaHasBeenDownloaded": {
						"type": "boolean"
					},
					"mediaUrl": {
						"type": "string"
					},
					"timestamp": {
						"type": "string",
						"format": "date-time"
					},
					"score": {
						"type": "number",
						"format": "double"
					},
					"postUrl": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"postId": {
						"type": "string"
					}
				},
				"required": [
					"subredditName",
					"downloadedMedia",
					"downloadedMediaCount",
					"mediaDownloadTries",
					"downloadError",
					"postMediaImagesProcessingError",
					"postThumbnailsCreated",
					"postMediaImagesHaveBeenProcessed",
					"couldNotDownload",
					"mediaHasBeenDownloaded",
					"mediaUrl",
					"timestamp",
					"score",
					"postUrl",
					"title",
					"postId"
				],
				"type": "object",
				"description": "Model Post"
			},
			"Post": {
				"properties": {
					"subredditName": {
						"type": "string"
					},
					"downloadedMedia": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"downloadedMediaCount": {
						"type": "number",
						"format": "double"
					},
					"mediaDownloadTries": {
						"type": "number",
						"format": "double"
					},
					"downloadError": {
						"type": "string",
						"nullable": true
					},
					"postMediaImagesProcessingError": {
						"type": "string",
						"nullable": true
					},
					"postThumbnailsCreated": {
						"type": "boolean"
					},
					"postMediaImagesHaveBeenProcessed": {
						"type": "boolean"
					},
					"couldNotDownload": {
						"type": "boolean"
					},
					"mediaHasBeenDownloaded": {
						"type": "boolean"
					},
					"mediaUrl": {
						"type": "string"
					},
					"timestamp": {
						"type": "string",
						"format": "date-time"
					},
					"score": {
						"type": "number",
						"format": "double"
					},
					"postUrl": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"postId": {
						"type": "string"
					}
				},
				"required": [
					"subredditName",
					"downloadedMedia",
					"downloadedMediaCount",
					"mediaDownloadTries",
					"downloadError",
					"postMediaImagesProcessingError",
					"postThumbnailsCreated",
					"postMediaImagesHaveBeenProcessed",
					"couldNotDownload",
					"mediaHasBeenDownloaded",
					"mediaUrl",
					"timestamp",
					"score",
					"postUrl",
					"title",
					"postId"
				],
				"type": "object",
				"description": "Model Post"
			},
			"PostFindResults": {
				"properties": {
					"results": {
						"items": {
							"allOf": [
								{
									"$ref": "#/components/schemas/Post"
								},
								{
									"properties": {
										"tags": {
											"items": {
												"$ref": "#/components/schemas/LeanTag"
											},
											"type": "array"
										}
									},
									"required": [
										"tags"
									],
									"type": "object"
								}
							]
						},
						"type": "array"
					},
					"count": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"results",
					"count"
				],
				"type": "object"
			},
			"ReturnType_typeofDB.findPosts_Paginated-or-typeofDB.findRandomPosts_Paginated_": {
				"$ref": "#/components/schemas/PostFindResults",
				"description": "Obtain the return type of a function type"
			},
			"Pick_PostType.postId-or-title-or-postUrl-or-score-or-mediaUrl-or-timestamp_": {
				"properties": {
					"postId": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"postUrl": {
						"type": "string"
					},
					"score": {
						"type": "number",
						"format": "double"
					},
					"mediaUrl": {
						"type": "string"
					},
					"timestamp": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"postId",
					"title",
					"postUrl",
					"score",
					"mediaUrl",
					"timestamp"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"IncomingPosts": {
				"properties": {
					"posts": {
						"items": {
							"$ref": "#/components/schemas/Pick_PostType.postId-or-title-or-postUrl-or-score-or-mediaUrl-or-timestamp_"
						},
						"type": "array"
					},
					"sub": {
						"type": "string"
					}
				},
				"required": [
					"posts",
					"sub"
				],
				"type": "object"
			},
			"Settings": {
				"properties": {
					"maxImageWidthForNonArchiveImage": {
						"type": "number",
						"format": "double"
					},
					"archiveImageCompressionQuality": {
						"type": "number",
						"format": "double"
					},
					"imageCompressionQuality": {
						"type": "number",
						"format": "double"
					},
					"updateEndingHour": {
						"type": "number",
						"format": "double"
					},
					"updateStartingHour": {
						"type": "number",
						"format": "double"
					},
					"updateAllDay": {
						"type": "boolean"
					},
					"numberImagesProcessAtOnce": {
						"type": "number",
						"format": "double"
					},
					"numberMediaDownloadsAtOnce": {
						"type": "number",
						"format": "double"
					},
					"uniqueId": {
						"type": "string"
					}
				},
				"required": [
					"maxImageWidthForNonArchiveImage",
					"archiveImageCompressionQuality",
					"imageCompressionQuality",
					"updateEndingHour",
					"updateStartingHour",
					"updateAllDay",
					"numberImagesProcessAtOnce",
					"numberMediaDownloadsAtOnce",
					"uniqueId"
				],
				"type": "object",
				"description": "Model Settings"
			},
			"SettingsUpdate": {
				"properties": {
					"maxImageWidthForNonArchiveImage": {
						"type": "number",
						"format": "double"
					},
					"archiveImageCompressionQuality": {
						"type": "number",
						"format": "double"
					},
					"imageCompressionQuality": {
						"type": "number",
						"format": "double"
					},
					"updateEndingHour": {
						"type": "number",
						"format": "double"
					},
					"updateStartingHour": {
						"type": "number",
						"format": "double"
					},
					"updateAllDay": {
						"type": "boolean"
					},
					"numberImagesProcessAtOnce": {
						"type": "number",
						"format": "double"
					},
					"numberMediaDownloadsAtOnce": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object"
			},
			"Tag": {
				"properties": {
					"favourited": {
						"type": "boolean"
					},
					"tag": {
						"type": "string"
					}
				},
				"required": [
					"favourited",
					"tag"
				],
				"type": "object",
				"description": "Model Tag"
			},
			"Record_string.unknown_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "RIDO Api",
		"version": "1"
	},
	"openapi": "3.0.0",
	"paths": {
		"/favs/get/all": {
			"get": {
				"operationId": "getAllFavs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"favTags": {
											"items": {
												"$ref": "#/components/schemas/LeanTag"
											},
											"type": "array"
										},
										"favSubs": {
											"items": {
												"$ref": "#/components/schemas/LeanSubreddit"
											},
											"type": "array"
										}
									},
									"required": [
										"favTags",
										"favSubs"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Gets all favourites.\nIncludes Tags that have been favourited and Subreddits that have been favourited.",
				"security": [],
				"parameters": []
			}
		},
		"/favs/get/subs": {
			"get": {
				"operationId": "getFavSubs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/LeanSubreddit"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Gets all Subreddit favourites.",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "testingContext",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/favs/get/tags": {
			"get": {
				"operationId": "getFavTags",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/LeanTag"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Gets all Tag favourites.",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "testingContext",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/favs/add/sub/{sub}": {
			"patch": {
				"operationId": "addSubToFavourites",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Add a Subreddit to favourites.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "sub",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 1
						}
					}
				]
			}
		},
		"/favs/remove/sub/{sub}": {
			"patch": {
				"operationId": "removeSubFromFavourites",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Remove a Subreddit to favourites.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "sub",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 1
						}
					}
				]
			}
		},
		"/favs/add/tag/{tag}": {
			"patch": {
				"operationId": "addTagToFavourites",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Add a Tag to favourites.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "tag",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 1
						}
					}
				]
			}
		},
		"/favs/remove/tag/{tag}": {
			"patch": {
				"operationId": "removeTagFromFavourites",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Remove a Subreddit to favourites.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "tag",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 1
						}
					}
				]
			}
		},
		"/logs/search": {
			"get": {
				"operationId": "searchLogs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"results": {
											"items": {
												"$ref": "#/components/schemas/Log"
											},
											"type": "array"
										},
										"count": {
											"type": "number",
											"format": "double"
										}
									},
									"required": [
										"results",
										"count"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Search logs.",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "page",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "logLevelFilter",
						"required": true,
						"schema": {
							"type": "string",
							"enum": [
								"all",
								"error",
								"warn",
								"info",
								"debug",
								"trace"
							]
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "searchQuery",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "testingContext",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/logs/create": {
			"post": {
				"operationId": "saveLog",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Create a log.",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IncomingLog"
							}
						}
					}
				}
			}
		},
		"/posts/get/single/{postId}": {
			"get": {
				"operationId": "getPost",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/PostType"
										},
										{}
									]
								}
							}
						}
					}
				},
				"description": "Get single post.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "postId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "includeTags",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					}
				]
			}
		},
		"/posts/get/all/ids": {
			"get": {
				"operationId": "getAllPostIds",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all post ids.",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "testingContext",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/posts/get/all/need-to-be-downloaded": {
			"get": {
				"operationId": "getPostsThatNeedMediaToBeDownloaded",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/PostType"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all posts that need to be downloaded.",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "testingContext",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/posts/get/all/need-images-to-be-optimized": {
			"get": {
				"operationId": "getPostsWhereImagesNeedToBeOptimized",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/PostType"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all posts that need their images to be optimized.",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "testingContext",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/posts/get/find": {
			"get": {
				"operationId": "findPosts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReturnType_typeofDB.findPosts_Paginated-or-typeofDB.findRandomPosts_Paginated_"
								}
							}
						}
					}
				},
				"description": "Find posts.",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "testingContext",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "subs",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"in": "query",
						"name": "tags",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"in": "query",
						"name": "sortOrder",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "afterDate",
						"required": false,
						"schema": {
							"format": "date-time",
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "beforeDate",
						"required": false,
						"schema": {
							"format": "date-time",
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/posts/update/single/post-image-processing-status/{postId}": {
			"patch": {
				"operationId": "updatePostImageProcessingStatus",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Update post image processing status.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "postId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "postMediaImagesHaveBeenProcessed",
						"required": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "postMediaImagesProcessingError",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/posts/update/single/post-download-info-on-success/{postId}": {
			"patch": {
				"operationId": "updatePostDownloadInfoOnSuccess",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Update post download info on success.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "postId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "downloadedMedia",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"in": "query",
						"name": "downloadedMediaCount",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/posts/update/single/post-download-info-on-error/{postId}": {
			"patch": {
				"operationId": "updatePostDownloadInfoOnError",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Update post download info on error.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "postId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "downloadError",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "couldNotDownload",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "mediaDownloadTries",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/posts/update/single/assign-to-tag/{postId}": {
			"patch": {
				"operationId": "assignPostToTag",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Assign post to tag.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "postId",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 2
						}
					},
					{
						"in": "query",
						"name": "tag",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 1
						}
					}
				]
			}
		},
		"/posts/update/single/remove-from-tag/{postId}": {
			"patch": {
				"operationId": "removePostFromTag",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Remove post from tag.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "postId",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 2
						}
					},
					{
						"in": "query",
						"name": "tag",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 1
						}
					}
				]
			}
		},
		"/posts/add/batch": {
			"post": {
				"operationId": "batchAddPosts",
				"responses": {
					"201": {
						"description": "Created"
					}
				},
				"description": "Batch add multiple posts.",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IncomingPosts"
							}
						}
					}
				}
			}
		},
		"/settings/get": {
			"get": {
				"operationId": "getSettings",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Settings"
								}
							}
						}
					}
				},
				"description": "Get all settings.",
				"security": [],
				"parameters": []
			}
		},
		"/settings/update": {
			"patch": {
				"operationId": "updateSettings",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Update settings.",
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SettingsUpdate"
							}
						}
					}
				}
			}
		},
		"/subs/get/single/{sub}": {
			"get": {
				"operationId": "getSub",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/LeanSubreddit"
										},
										{}
									]
								}
							}
						}
					}
				},
				"description": "Get single subreddit.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "sub",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 2
						}
					}
				]
			}
		},
		"/subs/get/all": {
			"get": {
				"operationId": "getAllSubs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/LeanSubreddit"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all subreddits.",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "testingContext",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/subs/get/all-that-need-to-be-updated": {
			"get": {
				"operationId": "getSubsThatNeedToBeUpdated",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/LeanSubreddit"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all subreddits that need to be updated.",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "testingContext",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/subs/get/single/posts-of-sub/{sub}": {
			"get": {
				"operationId": "getPostsOfSub",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"allOf": [
												{
													"properties": {
														"posts": {
															"items": {
																"$ref": "#/components/schemas/PostType"
															},
															"type": "array"
														}
													},
													"required": [
														"posts"
													],
													"type": "object"
												},
												{
													"$ref": "#/components/schemas/LeanSubreddit"
												}
											]
										},
										{}
									]
								}
							}
						}
					}
				},
				"description": "Get posts of subreddit",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "sub",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 2
						}
					}
				]
			}
		},
		"/subs/get/single/tags-of-sub/{sub}": {
			"get": {
				"operationId": "getTagsOfSub",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"allOf": [
												{
													"properties": {
														"tags": {
															"items": {
																"$ref": "#/components/schemas/Tag"
															},
															"type": "array"
														}
													},
													"required": [
														"tags"
													],
													"type": "object"
												},
												{
													"$ref": "#/components/schemas/LeanSubreddit"
												}
											]
										},
										{}
									]
								}
							}
						}
					}
				},
				"description": "Get tags of subreddit",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "sub",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 2
						}
					}
				]
			}
		},
		"/subs/add/single/{sub}": {
			"post": {
				"operationId": "addSub",
				"responses": {
					"201": {
						"description": "Created"
					}
				},
				"description": "Add new subreddit.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "sub",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 2
						}
					}
				]
			}
		},
		"/subs/remove/single/{sub}": {
			"delete": {
				"operationId": "removeSub",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Remove a subreddit.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "sub",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 2
						}
					}
				]
			}
		},
		"/subs/update/single/last-updated-time/{sub}": {
			"patch": {
				"operationId": "updateSubredditFeedLastUpdatedTime",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Update subreddit's last updated time.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "sub",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 2
						}
					}
				]
			}
		},
		"/subs/update/single/assign-to-tag/{sub}": {
			"patch": {
				"operationId": "assignSubToTag",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Assign subreddit to tag.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "sub",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 2
						}
					},
					{
						"in": "query",
						"name": "tag",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 1
						}
					}
				]
			}
		},
		"/subs/update/single/remove-from-tag/{sub}": {
			"patch": {
				"operationId": "removeSubFromTag",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Remove subreddit from tag.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "sub",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 2
						}
					},
					{
						"in": "query",
						"name": "tag",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 1
						}
					}
				]
			}
		},
		"/tags/get/all": {
			"get": {
				"operationId": "getAllTags",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Tag"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all tags.",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "testingContext",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tags/get/single/{tag}": {
			"get": {
				"operationId": "getTag",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/Tag"
										},
										{}
									]
								}
							}
						}
					}
				},
				"description": "Get single tag.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "tag",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 2
						}
					}
				]
			}
		},
		"/tags/add/single/{tag}": {
			"post": {
				"operationId": "addTag",
				"responses": {
					"201": {
						"description": "Created"
					}
				},
				"description": "Add new tag.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "tag",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 2
						}
					}
				]
			}
		},
		"/tags/remove/single/{tag}": {
			"delete": {
				"operationId": "removeTag",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Remove tag.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "tag",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 2
						}
					}
				]
			}
		},
		"/utils/get-post-data-from-reddit/{postId}": {
			"get": {
				"operationId": "getRedditPostData",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"properties": {
												"permalink": {
													"type": "string"
												}
											},
											"required": [
												"permalink"
											],
											"type": "object"
										},
										{
											"$ref": "#/components/schemas/Record_string.unknown_"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get post data of a reddit post from the reddit api.",
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "postId",
						"required": true,
						"schema": {
							"type": "string",
							"minLength": 2
						}
					}
				]
			}
		},
		"/utils/health": {
			"get": {
				"operationId": "healthCheck",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "API health check.",
				"security": [],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "http://0.0.0.0:3002/api"
		}
	]
}