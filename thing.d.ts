/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/favs/get/all': {
    /**
     * Gets all favourites. Includes Tags that have been favourited and Subreddits that have been favourited.
     * @description Gets all favourites. Includes Tags that have been favourited and Subreddits that have been favourited.
     */
    get: operations['getAllFavs']
  }
  '/favs/get/subs': {
    /**
     * Gets favourite subreddits
     * @description Gets favourite subreddits
     */
    get: operations['getFavSubs']
  }
  '/favs/get/tags': {
    /**
     * Gets favourite tags
     * @description Gets favourite tags
     */
    get: operations['getFavTags']
  }
  '/favs/add/sub/{sub}': {
    /**
     * Add a Subreddit to favourites.
     * @description Add a Subreddit to favourites.
     */
    patch: operations['addSubToFavourites']
  }
  '/favs/remove/sub/{sub}': {
    /**
     * Remove a Subreddit to favourites.
     * @description Remove a Subreddit to favourites.
     */
    patch: operations['removeSubFromFavourites']
  }
  '/favs/add/tag/{tag}': {
    /**
     * Add a Tag to favourites.
     * @description Add a Tag to favourites.
     */
    patch: operations['addTagToFavourites']
  }
  '/favs/remove/tag/{tag}': {
    /**
     * Remove a Tag from favourites.
     * @description Remove a Tag from favourites.
     */
    patch: operations['removeTagFromFavourites']
  }
  '/logs/search': {
    /**
     * Search logs
     * @description Search logs
     */
    get: operations['searchLogs']
  }
  '/logs/create': {
    /**
     * Create a log
     * @description Create a log
     */
    post: operations['saveLog']
  }
  '/posts/get/single/{postId}': {
    /**
     * Get single post.
     * @description Get single post.
     */
    get: operations['getPost']
  }
  '/posts/get/all/ids': {
    /**
     * Get all post ids.
     * @description Get all post ids.
     */
    get: operations['getAllPostIds']
  }
  '/posts/get/all/need-to-be-downloaded': {
    /**
     * Get all posts that need to be downloaded.
     * @description Get all posts that need to be downloaded.
     */
    get: operations['getPostsThatNeedMediaToBeDownloaded']
  }
  '/posts/get/all/need-images-to-be-optimized': {
    /**
     * Get all posts that need their images to be optimized.
     * @description Get all posts that need their images to be optimized.
     */
    get: operations['getPostsWhereImagesNeedToBeOptimized']
  }
  '/posts/get/find': {
    /**
     * Find posts.
     * @description Find posts.
     */
    get: operations['findPosts']
  }
  '/posts/update/single/post-image-processing-status/{postId}': {
    /**
     * Update post image processing status.
     * @description Update post image processing status.
     */
    patch: operations['updatePostImageProcessingStatus']
  }
  '/posts/update/single/post-download-info-on-success/{postId}': {
    /**
     * Update post download info on success.
     * @description Update post download info on success.
     */
    patch: operations['updatePostDownloadInfoOnSuccess']
  }
  '/posts/update/single/post-download-info-on-error/{postId}': {
    /**
     * Update post download info on error.
     * @description Update post download info on error.
     */
    patch: operations['updatePostDownloadInfoOnError']
  }
  '/posts/update/single/assign-to-tag/{postId}': {
    /**
     * Assign post to tag.
     * @description Assign post to tag.
     */
    patch: operations['assignPostToTag']
  }
  '/posts/update/single/remove-from-tag/{postId}': {
    /**
     * Remove post from tag.
     * @description Remove post from tag.
     */
    patch: operations['removePostFromTag']
  }
  '/posts/add/batch': {
    /**
     * Batch add multiple posts.
     * @description Batch add multiple posts.
     */
    post: operations['batchAddPosts']
  }
  '/settings/get': {
    /**
     * Get all settings.
     * @description Get all settings.
     */
    get: operations['getSettings']
  }
  '/settings/update': {
    /**
     * Update settings.
     * @description Update settings.
     */
    patch: operations['updateSettings']
  }
  '/subs/get/single/{sub}': {
    /**
     * Get single subreddit.
     * @description Get single subreddit.
     */
    get: operations['getSub']
  }
  '/subs/get/all': {
    /**
     * Get all subreddits.
     * @description Get all subreddits.
     */
    get: operations['getAllSubs']
  }
  '/subs/get/all-that-need-to-be-updated': {
    /**
     * Get all subreddits that need to be updated.
     * @description Get all subreddits that need to be updated.
     */
    get: operations['getSubsThatNeedToBeUpdated']
  }
  '/subs/get/single/posts-of-sub/{sub}': {
    /**
     * Get posts of subreddit
     * @description Get posts of subreddit
     */
    get: operations['getPostsOfSub']
  }
  '/subs/get/single/tags-of-sub/{sub}': {
    /**
     * Get tags of subreddit
     * @description Get tags of subreddit
     */
    get: operations['getTagsOfSub']
  }
  '/subs/add/single/{sub}': {
    /**
     * Add new subreddit.
     * @description Add new subreddit.
     */
    post: operations['addSub']
  }
  '/subs/remove/single/{sub}': {
    /**
     * Remove a subreddit.
     * @description Remove a subreddit.
     */
    delete: operations['removeSub']
  }
  '/subs/update/single/last-updated-time/{sub}': {
    /**
     * Update subreddit's last updated time.
     * @description Update subreddit's last updated time.
     */
    patch: operations['updateSubredditFeedLastUpdatedTime']
  }
  '/subs/update/single/assign-to-tag/{sub}': {
    /**
     * Assign subreddit to tag.
     * @description Assign subreddit to tag.
     */
    patch: operations['assignSubToTag']
  }
  '/subs/update/single/remove-from-tag/{sub}': {
    /**
     * Remove subreddit from tag.
     * @description Remove subreddit from tag.
     */
    patch: operations['removeSubFromTag']
  }
  '/tags/get/all': {
    /**
     * Get all tags.
     * @description Get all tags.
     */
    get: operations['getAllTags']
  }
  '/tags/get/single/{tag}': {
    /**
     * Get single tag.
     * @description Get single tag.
     */
    get: operations['getTag']
  }
  '/tags/add/single/{tag}': {
    /**
     * Add new tag.
     * @description Add new tag.
     */
    post: operations['addTag']
  }
  '/tags/remove/single/{tag}': {
    /**
     * Remove tag.
     * @description Remove tag.
     */
    delete: operations['removeTag']
  }
  '/utils/get-post-data-from-reddit/{postId}': {
    /**
     * Get post data of a reddit post from the reddit api.
     * @description Get post data of a reddit post from the reddit api.
     */
    get: operations['getRedditPostData']
  }
  '/utils/health': {
    /**
     * API health check.
     * @description API health check.
     */
    get: operations['healthCheck']
  }
}

export type webhooks = Record<string, never>

export type components = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Gets all favourites. Includes Tags that have been favourited and Subreddits that have been favourited.
   * @description Gets all favourites. Includes Tags that have been favourited and Subreddits that have been favourited.
   */
  getAllFavs: {
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            favSubs: {
              name: string
              favourited: boolean
            }[]
            favTags: {
              tag: string
              favourited: boolean
            }[]
          }
        }
      }
    }
  }
  /**
   * Gets favourite subreddits
   * @description Gets favourite subreddits
   */
  getFavSubs: {
    parameters: {
      query: {
        /** @description Used in testing only */
        testingContext?: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            name: string
            favourited: boolean
          }[]
        }
      }
    }
  }
  /**
   * Gets favourite tags
   * @description Gets favourite tags
   */
  getFavTags: {
    parameters: {
      query: {
        /** @description Used in testing only */
        testingContext?: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            tag: string
            favourited: boolean
          }[]
        }
      }
    }
  }
  /**
   * Add a Subreddit to favourites.
   * @description Add a Subreddit to favourites.
   */
  addSubToFavourites: {
    parameters: {
      path: {
        /** @description subreddit */
        sub: string
      }
    }
    responses: {
      /** @description Success */
      204: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Remove a Subreddit to favourites.
   * @description Remove a Subreddit to favourites.
   */
  removeSubFromFavourites: {
    parameters: {
      path: {
        /** @description subreddit */
        sub: string
      }
    }
    responses: {
      /** @description Success */
      204: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Add a Tag to favourites.
   * @description Add a Tag to favourites.
   */
  addTagToFavourites: {
    parameters: {
      path: {
        /** @description tag */
        tag: string
      }
    }
    responses: {
      /** @description Success */
      204: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Remove a Tag from favourites.
   * @description Remove a Tag from favourites.
   */
  removeTagFromFavourites: {
    parameters: {
      path: {
        /** @description tag */
        tag: string
      }
    }
    responses: {
      /** @description Success */
      204: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Search logs
   * @description Search logs
   */
  searchLogs: {
    parameters: {
      query: {
        page: number
        logLevelFilter: 'all' | 'error' | 'warn' | 'info' | 'debug' | 'trace'
        limit: number
        searchQuery?: string
        /** @description testingContext is only used in testing */
        testingContext?: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            count: number
            results: {
              /** Format: uuid */
              uniqueId: string
              createdAt: number
              level: string
              message: string | null
              service: string | null
              error: string | null
              other: string | null
            }[]
          }
        }
      }
    }
  }
  /**
   * Create a log
   * @description Create a log
   */
  saveLog: {
    requestBody?: {
      content: {
        'application/json': {
          /** @enum {string} */
          level: 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace'
          message?: string
          service: string
          error?: string
          other?: unknown
        }
      }
    }
    responses: {
      /** @description Success */
      201: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Get single post.
   * @description Get single post.
   */
  getPost: {
    parameters: {
      query: {
        includeTags?: boolean
      }
      path: {
        postId: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            postId: string
            title: string
            postUrl: string
            score: number
            /** Format: date-time */
            timestamp: string
            mediaUrl: string
            mediaHasBeenDownloaded: boolean
            couldNotDownload: boolean
            postMediaImagesHaveBeenProcessed: boolean
            postThumbnailsCreated: boolean
            postMediaImagesProcessingError: string | null
            downloadError: string | null
            mediaDownloadTries: number
            downloadedMediaCount: number
            downloadedMedia: string[]
            subredditName: string
            tags?: {
              tag: string
              favourited: boolean
            }[]
          }
        }
      }
    }
  }
  /**
   * Get all post ids.
   * @description Get all post ids.
   */
  getAllPostIds: {
    parameters: {
      query: {
        /** @description Used in testing only */
        testingContext?: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': string[]
        }
      }
    }
  }
  /**
   * Get all posts that need to be downloaded.
   * @description Get all posts that need to be downloaded.
   */
  getPostsThatNeedMediaToBeDownloaded: {
    parameters: {
      query: {
        /** @description Used in testing only */
        testingContext?: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            postId: string
            title: string
            postUrl: string
            score: number
            /** Format: date-time */
            timestamp: string
            mediaUrl: string
            mediaHasBeenDownloaded: boolean
            couldNotDownload: boolean
            postMediaImagesHaveBeenProcessed: boolean
            postThumbnailsCreated: boolean
            postMediaImagesProcessingError: string | null
            downloadError: string | null
            mediaDownloadTries: number
            downloadedMediaCount: number
            downloadedMedia: string[]
            subredditName: string
          }[]
        }
      }
    }
  }
  /**
   * Get all posts that need their images to be optimized.
   * @description Get all posts that need their images to be optimized.
   */
  getPostsWhereImagesNeedToBeOptimized: {
    parameters: {
      query: {
        /** @description Used in testing only */
        testingContext?: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            postId: string
            title: string
            postUrl: string
            score: number
            /** Format: date-time */
            timestamp: string
            mediaUrl: string
            mediaHasBeenDownloaded: boolean
            couldNotDownload: boolean
            postMediaImagesHaveBeenProcessed: boolean
            postThumbnailsCreated: boolean
            postMediaImagesProcessingError: string | null
            downloadError: string | null
            mediaDownloadTries: number
            downloadedMediaCount: number
            downloadedMedia: string[]
            subredditName: string
          }[]
        }
      }
    }
  }
  /**
   * Find posts.
   * @description Find posts.
   */
  findPosts: {
    requestBody?: {
      content: {
        'application/json': {
          testingContext?: string
          subs?: string[]
          tags?: string[]
          /** @enum {string} */
          sortOrder?: 'top' | 'asc' | 'desc' | 'random'
          afterDate?: string
          beforeDate?: string
          /** @default 1 */
          page?: number
          /** @default 100 */
          limit?: number
        }
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            count: number
            results: {
              postId: string
              title: string
              postUrl: string
              score: number
              /** Format: date-time */
              timestamp: string
              mediaUrl: string
              mediaHasBeenDownloaded: boolean
              couldNotDownload: boolean
              postMediaImagesHaveBeenProcessed: boolean
              postThumbnailsCreated: boolean
              postMediaImagesProcessingError: string | null
              downloadError: string | null
              mediaDownloadTries: number
              downloadedMediaCount: number
              downloadedMedia: string[]
              subredditName: string
              tags?: {
                tag: string
                favourited: boolean
              }[]
            }[]
          }
        }
      }
    }
  }
  /**
   * Update post image processing status.
   * @description Update post image processing status.
   */
  updatePostImageProcessingStatus: {
    parameters: {
      query: {
        postMediaImagesHaveBeenProcessed: boolean
        postMediaImagesProcessingError?: string
      }
      path: {
        postId: string
      }
    }
    responses: {
      /** @description Success */
      204: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Update post download info on success.
   * @description Update post download info on success.
   */
  updatePostDownloadInfoOnSuccess: {
    parameters: {
      path: {
        postId: string
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          downloadedMedia: string[]
          downloadedMediaCount?: number
        }
      }
    }
    responses: {
      /** @description Success */
      204: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Update post download info on error.
   * @description Update post download info on error.
   */
  updatePostDownloadInfoOnError: {
    parameters: {
      query: {
        downloadError: string
        couldNotDownload?: boolean
        mediaDownloadTries?: number
      }
      path: {
        postId: string
      }
    }
    responses: {
      /** @description Success */
      204: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Assign post to tag.
   * @description Assign post to tag.
   */
  assignPostToTag: {
    parameters: {
      query: {
        tag: string
      }
      path: {
        postId: string
      }
    }
    responses: {
      /** @description Success */
      204: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Remove post from tag.
   * @description Remove post from tag.
   */
  removePostFromTag: {
    parameters: {
      query: {
        tag: string
      }
      path: {
        postId: string
      }
    }
    responses: {
      /** @description Success */
      204: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Batch add multiple posts.
   * @description Batch add multiple posts.
   */
  batchAddPosts: {
    requestBody?: {
      content: {
        'application/json': {
          sub: string
          posts: {
            postId: string
            title: string
            postUrl: string
            score: number
            timestamp: string
            mediaUrl: string
            /** @default false */
            mediaHasBeenDownloaded?: boolean
            /** @default false */
            couldNotDownload?: boolean
            /** @default false */
            postMediaImagesHaveBeenProcessed?: boolean
            postMediaImagesProcessingError?: string
            /** @default false */
            postThumbnailsCreated?: boolean
            /** @default 0 */
            mediaDownloadTries?: number
            /** @default 0 */
            downloadedMediaCount?: number
            downloadError?: string
            downloadedMedia?: string[]
          }[]
        }
      }
    }
    responses: {
      /** @description Success */
      201: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Get all settings.
   * @description Get all settings.
   */
  getSettings: {
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            numberMediaDownloadsAtOnce: number
            numberImagesProcessAtOnce: number
            updateAllDay: boolean
            updateStartingHour: number
            updateEndingHour: number
            imageCompressionQuality: number
            archiveImageCompressionQuality: number
            maxImageWidthForNonArchiveImage: number
          }
        }
      }
    }
  }
  /**
   * Update settings.
   * @description Update settings.
   */
  updateSettings: {
    requestBody?: {
      content: {
        'application/json': {
          numberMediaDownloadsAtOnce?: number
          numberImagesProcessAtOnce?: number
          updateAllDay?: boolean
          updateStartingHour?: number
          updateEndingHour?: number
          imageCompressionQuality?: number
          archiveImageCompressionQuality?: number
          maxImageWidthForNonArchiveImage?: number
        }
      }
    }
    responses: {
      /** @description Success */
      204: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Get single subreddit.
   * @description Get single subreddit.
   */
  getSub: {
    parameters: {
      path: {
        sub: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            name: string
            favourited: boolean
          }
        }
      }
    }
  }
  /**
   * Get all subreddits.
   * @description Get all subreddits.
   */
  getAllSubs: {
    parameters: {
      query: {
        /** @description Only used in testing */
        testingContext?: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            name: string
            favourited: boolean
          }[]
        }
      }
    }
  }
  /**
   * Get all subreddits that need to be updated.
   * @description Get all subreddits that need to be updated.
   */
  getSubsThatNeedToBeUpdated: {
    parameters: {
      query: {
        /** @description Only used in testing */
        testingContext?: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            name: string
            favourited: boolean
          }[]
        }
      }
    }
  }
  /**
   * Get posts of subreddit
   * @description Get posts of subreddit
   */
  getPostsOfSub: {
    parameters: {
      path: {
        sub: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            name: string
            favourited: boolean
            posts: {
              postId: string
              title: string
              postUrl: string
              score: number
              /** Format: date-time */
              timestamp: string
              mediaUrl: string
              mediaHasBeenDownloaded: boolean
              couldNotDownload: boolean
              postMediaImagesHaveBeenProcessed: boolean
              postThumbnailsCreated: boolean
              postMediaImagesProcessingError: string | null
              downloadError: string | null
              mediaDownloadTries: number
              downloadedMediaCount: number
              downloadedMedia: string[]
              subredditName: string
            }[]
          }
        }
      }
    }
  }
  /**
   * Get tags of subreddit
   * @description Get tags of subreddit
   */
  getTagsOfSub: {
    parameters: {
      path: {
        sub: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            name: string
            favourited: boolean
            tags: {
              tag: string
              favourited: boolean
            }[]
          }
        }
      }
    }
  }
  /**
   * Add new subreddit.
   * @description Add new subreddit.
   */
  addSub: {
    parameters: {
      path: {
        sub: string
      }
    }
    responses: {
      /** @description Success */
      201: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Remove a subreddit.
   * @description Remove a subreddit.
   */
  removeSub: {
    parameters: {
      path: {
        sub: string
      }
    }
    responses: {
      /** @description Success */
      204: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Update subreddit's last updated time.
   * @description Update subreddit's last updated time.
   */
  updateSubredditFeedLastUpdatedTime: {
    parameters: {
      path: {
        sub: string
      }
    }
    responses: {
      /** @description Success */
      204: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Assign subreddit to tag.
   * @description Assign subreddit to tag.
   */
  assignSubToTag: {
    parameters: {
      query: {
        tag: string
      }
      path: {
        sub: string
      }
    }
    responses: {
      /** @description Success */
      204: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Remove subreddit from tag.
   * @description Remove subreddit from tag.
   */
  removeSubFromTag: {
    parameters: {
      query: {
        tag: string
      }
      path: {
        sub: string
      }
    }
    responses: {
      /** @description Success */
      204: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Get all tags.
   * @description Get all tags.
   */
  getAllTags: {
    parameters: {
      query: {
        testingContext?: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            tag: string
            favourited: boolean
          }[]
        }
      }
    }
  }
  /**
   * Get single tag.
   * @description Get single tag.
   */
  getTag: {
    parameters: {
      path: {
        tag: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': {
            tag: string
            favourited: boolean
          }
        }
      }
    }
  }
  /**
   * Add new tag.
   * @description Add new tag.
   */
  addTag: {
    parameters: {
      path: {
        tag: string
      }
    }
    responses: {
      /** @description Success */
      201: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Remove tag.
   * @description Remove tag.
   */
  removeTag: {
    parameters: {
      path: {
        tag: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Get post data of a reddit post from the reddit api.
   * @description Get post data of a reddit post from the reddit api.
   */
  getRedditPostData: {
    parameters: {
      path: {
        postId: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * API health check.
   * @description API health check.
   */
  healthCheck: {
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': 'OK'
        }
      }
    }
  }
}
