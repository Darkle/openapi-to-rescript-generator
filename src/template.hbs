module Api = {
  // Dunno how else to type a literal null
  type null = LiteralJSNull
  type jsObject = JsObject
{{#each paths}}
  {{setVariable 'apiPath' @key}}

  {{#each this}}
    module {{createModuleName this.operationId}} = {
      let apiPath = "{{@root.apiPath}}"
      let httpVerb = "{{@key}}"

      {{#if parameters}}
        {{!-- https://swagger.io/specification/#parameter-object --}}
        {{#if (paramContainsParamType 'path' parameters)}}
          type pathParams = {
            {{#each parameters}}
              {{#if (eq in 'path')}}
                {{#if schema.enum}}
                  {{{toValidRecordFieldName name}}}{{#unless required}}?{{/unless}}: {{stringEnumToPolyVariant schema.enum}},
                {{else}}
                  {{{toValidRecordFieldName name}}}{{#unless required}}?{{/unless}}: {{convertSchemaType schema.type}},
                {{/if}}
              {{/if}}
            {{/each}}
          }
        {{/if}}

          {{#if (paramContainsParamType 'query' parameters)}}
            type queryParams = {
              {{#each parameters}}
                {{#if (eq in 'query')}}
                  {{#if schema.enum}}
                    {{{toValidRecordFieldName name}}}{{#unless required}}?{{/unless}}: {{stringEnumToPolyVariant schema.enum}},
                  {{else}}
                    {{{toValidRecordFieldName name}}}{{#unless required}}?{{/unless}}: {{convertSchemaType schema.type}},
                  {{/if}}
                {{/if}}
              {{/each}}
            }
          {{/if}}

        {{#if (paramContainsParamType 'header' parameters)}}
          type headerParams = {
            {{#each parameters}}
              {{#if (eq in 'header')}}
                {{#if schema.enum}}
                  {{{toValidRecordFieldName name}}}{{#unless required}}?{{/unless}}: {{stringEnumToPolyVariant schema.enum}},
                {{else}}
                  {{{toValidRecordFieldName name}}}{{#unless required}}?{{/unless}}: {{convertSchemaType schema.type}},
                {{/if}}
              {{/if}}
            {{/each}}
          }
        {{/if}}

        {{#if (paramContainsParamType 'cookie' parameters)}}
          type cookieParams = {
            {{#each parameters}}
              {{#if (eq in 'cookie')}}
                {{#if schema.enum}}
                  {{{toValidRecordFieldName name}}}{{#unless required}}?{{/unless}}: {{stringEnumToPolyVariant schema.enum}},
                {{else}}
                  {{{toValidRecordFieldName name}}}{{#unless required}}?{{/unless}}: {{convertSchemaType schema.type}},
                {{/if}}
              {{/if}}
            {{/each}}
          }
        {{/if}}
      {{/if}}

      {{#each requestBody.content}}
        {{!-- operationId could start with uppercase and vars gotta start with lowercase in rescript --}}
        let {{ createReqBodyStructName ../operationId}}RequestBodyStruct = {{{structify schema}}}
      {{/each}}

      {{#each responses}}
        {{#each content}}
          {{!-- Can have empty responses so check if schema truthy --}}
          {{#if schema}}
            let {{ createReqBodyStructName ../../operationId}}ResponseStruct = {{{structify schema}}}
          {{/if}}
        {{/each}}
      {{/each}}
    }
  {{/each}}
{{/each}}
}