module Api = {
{{#each paths}}
  {{setVariable 'apiPath' @key}}

  {{#each this}}
    module {{capitalize (toValidVarName this.operationId)}} = {
      let apiPath = "{{@root.apiPath}}"
      let httpVerb = "{{@key}}"

      {{!-- https://swagger.io/specification/#parameter-object --}}
      {{#if (paramContainsParamType 'path' parameters)}}
        type pathParams = {
          {{#each parameters}}
            {{#if (eq in 'path')}}
              {{#if schema.enum}}
                {{name}}{{#unless required}}?{{/unless}}: {{stringEnumToPolyVariant schema.enum}},
              {{else}}
                {{name}}{{#unless required}}?{{/unless}}: {{schema.type}},
              {{/if}}
            {{/if}}
          {{/each}}
        }
      {{/if}}

      {{#if (paramContainsParamType 'query' parameters)}}
        type queryParams = {
          {{#each parameters}}
            {{#if (eq in 'query')}}
              {{#if schema.enum}}
                {{name}}{{#unless required}}?{{/unless}}: {{stringEnumToPolyVariant schema.enum}},
              {{else}}
                {{name}}{{#unless required}}?{{/unless}}: {{schema.type}},
              {{/if}}
            {{/if}}
          {{/each}}
        }
      {{/if}}

      {{#if (paramContainsParamType 'header' parameters)}}
        type headerParams = {
          {{#each parameters}}
            {{#if (eq in 'header')}}
              {{#if schema.enum}}
                {{name}}{{#unless required}}?{{/unless}}: {{stringEnumToPolyVariant schema.enum}},
              {{else}}
                {{name}}{{#unless required}}?{{/unless}}: {{schema.type}},
              {{/if}}
            {{/if}}
          {{/each}}
        }
      {{/if}}

      {{#if (paramContainsParamType 'cookie' parameters)}}
        type cookieParams = {
          {{#each parameters}}
            {{#if (eq in 'cookie')}}
              {{#if schema.enum}}
                {{name}}{{#unless required}}?{{/unless}}: {{stringEnumToPolyVariant schema.enum}},
              {{else}}
                {{name}}{{#unless required}}?{{/unless}}: {{schema.type}},
              {{/if}}
            {{/if}}
          {{/each}}
        }
      {{/if}}

      {{#each requestBody.content}}
        {{!-- operationId could start with uppercas and vars gotta start with lowercase in rescript --}}
        let {{ unCapitalize (toValidVarName ../operationId)}}RequestBodyStruct = {{{structify schema}}}
      {{/each}}

      {{#each responses}}
        {{#each content}}
          {{!-- Can have empty responses so check if schema truthy --}}
          {{#if schema}}
            let {{ unCapitalize (toValidVarName ../../operationId)}}ResponseStruct = {{{structify schema}}}
          {{/if}}
        {{/each}}
      {{/each}}
    }
  {{/each}}
{{/each}}
}